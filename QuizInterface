import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

public class QuizApp {
    static int currentQuestionIndex = 0;
    static int userScore = 0;
    static Question[] questions;
    static Timer timer;

    public static void main(String[] args) {
        initializeQuestions();
        startQuiz();
    }

    static void initializeQuestions() {
        questions = new Question[10];
        questions[0] = new Question("Who invented Java Programming?",
                new String[] { "Guido van Rossum", "James Gosling", "Dennis Ritchie", "jarne Stroustrup" }, 1);
        questions[1] = new Question("Which statement is true about Java?",
                new String[] { "Java is a sequence-dependent programming language", "Java is a code dependent programming language", "Java is a platform-dependent programming language", "Java is a platform-independent programming language" }, 3);
        questions[2] = new Question("Which component is used to compile, debug and execute the java programs?",
                new String[] { "JRE", "JIT", "JDK", "JVM" }, 2);
        questions[3] = new Question("Which one of the following is not a Java feature?",
                new String[] { "Object-oriented", "Use of pointers", "Portable", "Dynamic and Extensible" }, 1);
        questions[4] = new Question("Which of these cannot be used for a variable name in Java?",
                new String[] { "identifier & keyword", "identifier", "keyword", "none of the mentioned" }, 2);
        questions[5] = new Question("What is the extension of java code files?",
                new String[] { ".js", ".txt", ".class", ".java" }, 3);
        questions[6] = new Question("Which environment variable is used to set the java path?",
                new String[] { "MAVEN_Path", "JavaPATH", "JAVA", "JAVA_HOME" }, 3);
        questions[7] = new Question("Which of the following is not an OOPS concept in Java?",
                new String[] { "Polymorphism", "Inheritance", "Compilation", "Encapsulation" }, 2);
        questions[8] = new Question("What is not the use of “this” keyword in Java?",
                new String[] { "Referring to the instance variable when a local variable has the same name", "Passing itself to the method of the same class", "Passing itself to another method", "Calling another constructor in constructor chaining" }, 1);
        questions[9] = new Question("What is the extension of compiled java classes?",
                new String[] { ".txt", ".js", ".class", ".java" }, 2);
    }

    static void startQuiz() {
       

        System.out.println("Welcome to the Quiz!");
        

        timer = new Timer();
        timer.schedule(new TimerTask() {
            public void run() {
                System.out.println("\nTime's up! Moving to the next question.");
                displayNextQuestion();
            }
            
        }, 20000);

        displayNextQuestion();
    }

    static void displayNextQuestion() {
        if (currentQuestionIndex < questions.length) {
            Question currentQuestion = questions[currentQuestionIndex];
            System.out.println("\n" + currentQuestion.getQuestionText());

            for (int i = 0; i < currentQuestion.getOptions().length; i++) {
                System.out.println((i + 1) + ". " + currentQuestion.getOptions()[i]);
            }

            
            Scanner scanner = new Scanner(System.in);
            System.out.print("Select your answer (1-" + currentQuestion.getOptions().length + "): ");
            int userAnswer = scanner.nextInt() - 1;

            if (userAnswer == currentQuestion.getCorrectAnswer()) {
                userScore++;
            
            
        }
            currentQuestionIndex++;
            timer.cancel();
            timer = new Timer();
            timer.schedule(new TimerTask() {
                public void run() {
                    System.out.println("\nTime's up! Moving to the next question.");
                    displayNextQuestion();
                }
            
            }, 20000);

        }
         else {
            endQuiz();
        }

        
    }

    static void endQuiz() {
        System.out.println("\nQuiz Finished!");
        System.out.println("Your score: " + userScore + "/" + questions.length);
        System.out.println("Thank you for playing!");
    }
}

class Question {
    private String questionText;
    private String[] options;
    private int correctAnswer;

    public Question(String questionText, String[] options, int correctAnswer) {
        this.questionText = questionText;
        this.options = options;
        this.correctAnswer = correctAnswer;
    }

    public String getQuestionText() {
        return questionText;
    }

    public String[] getOptions() {
        return options;
    }

    public int getCorrectAnswer() {
        return correctAnswer;
    }
}
